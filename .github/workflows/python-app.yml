name: ETL Dashboard CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run full test suite'
        required: false
        default: 'true'
        type: boolean
      run_security:
        description: 'Run security scans'
        required: false
        default: 'true'
        type: boolean

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit safety
        
    - name: Check code formatting with Black
      run: |
        black --check --diff backend/ frontend/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff backend/ frontend/ tests/
        
    - name: Lint with flake8
      run: |
        flake8 backend/ frontend/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy
      run: |
        mypy backend/ --ignore-missing-imports --no-strict-optional
        
    - name: Security check with bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Check dependencies for security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

  # Testing Matrix
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-py${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock coverage[toml]
        
    - name: Create test directories
      run: |
        mkdir -p data/uploads data/processed data/pipeline_output
        
    - name: Run tests with pytest
      run: |
        pytest tests/ \
          --cov=backend \
          --cov=frontend \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --maxfail=5 \
          -v
          
    - name: Upload coverage reports
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: etl-dashboard-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: false
        tags: etl-dashboard-frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker Compose build
      run: |
        docker-compose build
        docker-compose config
        
    - name: Test production Docker Compose
      run: |
        docker-compose -f docker-compose.prod.yml build
        docker-compose -f docker-compose.prod.yml config

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, docker]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock requests
        
    - name: Start application with Docker Compose
      run: |
        docker-compose up -d --build
        
    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'
        timeout 60 bash -c 'until curl -f http://localhost:5000; do sleep 5; done'
        
    - name: Run integration tests
      run: |
        pytest tests/test_api_integration.py -v --tb=short
        
    - name: Check application logs
      if: failure()
      run: |
        docker-compose logs backend
        docker-compose logs frontend
        
    - name: Cleanup
      if: always()
      run: |
        docker-compose down -v

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
        
    - name: Run performance benchmarks
      run: |
        pytest tests/ -k "benchmark" --benchmark-json=benchmark.json
        
    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  # Deployment (only on main branch)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker, integration, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      id: deploy
      run: |
        echo "Deployment step - would deploy to staging environment"
        echo "url=https://etl-dashboard-staging.example.com" >> $GITHUB_OUTPUT
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging environment"
        # Add actual smoke test commands here

  # Release (only on release events)
  release:
    name: Create Release Assets
    runs-on: ubuntu-latest
    needs: [test, docker, integration, security]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Build distribution packages
      run: |
        python -m pip install --upgrade pip build
        python -m build
        
    - name: Create deployment package
      run: |
        tar -czf etl-dashboard-${{ github.event.release.tag_name }}.tar.gz \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='*.pyc' \
          --exclude='__pycache__' \
          .
          
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./etl-dashboard-${{ github.event.release.tag_name }}.tar.gz
        asset_name: etl-dashboard-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
